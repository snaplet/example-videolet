generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model actor {
  actor_id    Int          @id @default(autoincrement())
  first_name  String       @db.VarChar(45)
  last_name   String       @db.VarChar(45)
  last_update DateTime     @default(now()) @db.Timestamp(6)
  film_actor  film_actor[]

  @@index([last_name], name: "idx_actor_last_name")
}

model address {
  address_id  Int        @id @default(autoincrement())
  address     String     @db.VarChar(50)
  address2    String?    @db.VarChar(50)
  district    String     @db.VarChar(20)
  city_id     Int
  postal_code String?    @db.VarChar(10)
  phone       String     @db.VarChar(20)
  last_update DateTime   @default(now()) @db.Timestamp(6)
  city        city       @relation(fields: [city_id], references: [city_id])
  customer    customer[]
  staff       staff[]
  store       store[]

  @@index([city_id], name: "idx_fk_city_id")
}

model category {
  category_id   Int             @id @default(autoincrement())
  name          String          @db.VarChar(25)
  last_update   DateTime        @default(now()) @db.Timestamp(6)
  film_category film_category[]
}

model city {
  city_id     Int       @id @default(autoincrement())
  city        String    @db.VarChar(50)
  country_id  Int
  last_update DateTime  @default(now()) @db.Timestamp(6)
  country     country   @relation(fields: [country_id], references: [country_id])
  address     address[]

  @@index([country_id], name: "idx_fk_country_id")
}

model country {
  country_id  Int      @id @default(autoincrement())
  country     String   @db.VarChar(50)
  last_update DateTime @default(now()) @db.Timestamp(6)
  city        city[]
}

model customer {
  id               Int                @id @default(autoincrement()) @map("customer_id")
  store_id         Int
  firstName        String             @map("first_name") @db.VarChar(45)
  lastName         String             @map("last_name") @db.VarChar(45)
  email            String?            @db.VarChar(50)
  address_id       Int
  activebool       Boolean            @default(true)
  create_date      DateTime           @default(dbgenerated("('now'::text)::date")) @db.Date
  lastUpdate       DateTime?          @default(now()) @map("last_update") @db.Timestamp(6)
  active           Int?
  address          address            @relation(fields: [address_id], references: [address_id])
  store            store              @relation(fields: [store_id], references: [store_id])
  payment          payment[]
  payment_p2007_01 payment_p2007_01[] @ignore
  payment_p2007_02 payment_p2007_02[] @ignore
  payment_p2007_03 payment_p2007_03[] @ignore
  payment_p2007_04 payment_p2007_04[] @ignore
  payment_p2007_05 payment_p2007_05[] @ignore
  payment_p2007_06 payment_p2007_06[] @ignore
  rental           rental[]

  // @@index([address_id], name: "idx_fk_address_id")
  // @@index([store_id], name: "idx_fk_store_id")
  // @@index([lastName], name: "idx_last_name")
}

model film {
  id                                           Int                     @id @default(autoincrement()) @map("film_id")
  title                                        String                  @db.VarChar(255)
  description                                  String?
  year                                         Int?                    @map("release_year")
  language_id                                  Int
  original_language_id                         Int?
  rental_duration                              Int                     @default(3) @db.SmallInt
  cost                                         Decimal                 @default(4.99) @map("rental_rate") @db.Decimal(4, 2)
  length                                       Int?                    @db.SmallInt
  replacement_cost                             Decimal                 @default(19.99) @db.Decimal(5, 2)
  rating                                       mpaa_rating?            @default(G)
  last_update                                  DateTime                @default(now()) @db.Timestamp(6)
  special_features                             String[]
  fulltext                                     Unsupported("tsvector")
  language_film_language_idTolanguage          language                @relation("film_language_idTolanguage", fields: [language_id], references: [language_id])
  language_film_original_language_idTolanguage language?               @relation("film_original_language_idTolanguage", fields: [original_language_id], references: [language_id])
  film_actor                                   film_actor[]
  film_category                                film_category[]
  inventory                                    inventory[]

  // @@index([fulltext], name: "film_fulltext_idx")
  // @@index([language_id], name: "idx_fk_language_id")
  // @@index([original_language_id], name: "idx_fk_original_language_id")
  // @@index([title], name: "idx_title")
}

model film_actor {
  actor_id    Int
  film_id     Int
  last_update DateTime @default(now()) @db.Timestamp(6)
  actor       actor    @relation(fields: [actor_id], references: [actor_id])
  film        film     @relation(fields: [film_id], references: [id])

  @@id([actor_id, film_id])
  @@index([film_id], name: "idx_fk_film_id")
}

model film_category {
  film_id     Int
  category_id Int
  last_update DateTime @default(now()) @db.Timestamp(6)
  category    category @relation(fields: [category_id], references: [category_id])
  film        film     @relation(fields: [film_id], references: [id])

  @@id([film_id, category_id])
}

model inventory {
  inventory_id Int      @id @default(autoincrement())
  film_id      Int
  store_id     Int
  last_update  DateTime @default(now()) @db.Timestamp(6)
  film         film     @relation(fields: [film_id], references: [id])
  store        store    @relation(fields: [store_id], references: [store_id])
  rental       rental[]

  @@index([store_id, film_id], name: "idx_store_id_film_id")
}

model language {
  language_id                              Int      @id @default(autoincrement())
  name                                     String   @db.Char(20)
  last_update                              DateTime @default(now()) @db.Timestamp(6)
  film_film_language_idTolanguage          film[]   @relation("film_language_idTolanguage")
  film_film_original_language_idTolanguage film[]   @relation("film_original_language_idTolanguage")
}

model payment {
  payment_id   Int      @id @default(autoincrement())
  customer_id  Int
  staff_id     Int
  rental_id    Int
  amount       Decimal  @db.Decimal(5, 2)
  payment_date DateTime @db.Timestamp(6)
  customer     customer @relation(fields: [customer_id], references: [id])
  rental       rental   @relation(fields: [rental_id], references: [id])
  staff        staff    @relation(fields: [staff_id], references: [staff_id])

  // @@index([customer_id], name: "idx_fk_customer_id")
  // @@index([staff_id], name: "idx_fk_staff_id")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model payment_p2007_01 {
  payment_id   Int      @default(autoincrement())
  customer_id  Int
  staff_id     Int
  rental_id    Int
  amount       Decimal  @db.Decimal(5, 2)
  payment_date DateTime @db.Timestamp(6)
  customer     customer @relation(fields: [customer_id], references: [id])
  rental       rental   @relation(fields: [rental_id], references: [id])
  staff        staff    @relation(fields: [staff_id], references: [staff_id])

  @@index([customer_id], name: "idx_fk_payment_p2007_01_customer_id")
  @@index([staff_id], name: "idx_fk_payment_p2007_01_staff_id")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model payment_p2007_02 {
  payment_id   Int      @default(autoincrement())
  customer_id  Int
  staff_id     Int
  rental_id    Int
  amount       Decimal  @db.Decimal(5, 2)
  payment_date DateTime @db.Timestamp(6)
  customer     customer @relation(fields: [customer_id], references: [id])
  rental       rental   @relation(fields: [rental_id], references: [id])
  staff        staff    @relation(fields: [staff_id], references: [staff_id])

  @@index([customer_id], name: "idx_fk_payment_p2007_02_customer_id")
  @@index([staff_id], name: "idx_fk_payment_p2007_02_staff_id")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model payment_p2007_03 {
  payment_id   Int      @default(autoincrement())
  customer_id  Int
  staff_id     Int
  rental_id    Int
  amount       Decimal  @db.Decimal(5, 2)
  payment_date DateTime @db.Timestamp(6)
  customer     customer @relation(fields: [customer_id], references: [id])
  rental       rental   @relation(fields: [rental_id], references: [id])
  staff        staff    @relation(fields: [staff_id], references: [staff_id])

  @@index([customer_id], name: "idx_fk_payment_p2007_03_customer_id")
  @@index([staff_id], name: "idx_fk_payment_p2007_03_staff_id")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model payment_p2007_04 {
  payment_id   Int      @default(autoincrement())
  customer_id  Int
  staff_id     Int
  rental_id    Int
  amount       Decimal  @db.Decimal(5, 2)
  payment_date DateTime @db.Timestamp(6)
  customer     customer @relation(fields: [customer_id], references: [id])
  rental       rental   @relation(fields: [rental_id], references: [id])
  staff        staff    @relation(fields: [staff_id], references: [staff_id])

  @@index([customer_id], name: "idx_fk_payment_p2007_04_customer_id")
  @@index([staff_id], name: "idx_fk_payment_p2007_04_staff_id")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model payment_p2007_05 {
  payment_id   Int      @default(autoincrement())
  customer_id  Int
  staff_id     Int
  rental_id    Int
  amount       Decimal  @db.Decimal(5, 2)
  payment_date DateTime @db.Timestamp(6)
  customer     customer @relation(fields: [customer_id], references: [id])
  rental       rental   @relation(fields: [rental_id], references: [id])
  staff        staff    @relation(fields: [staff_id], references: [staff_id])

  @@index([customer_id], name: "idx_fk_payment_p2007_05_customer_id")
  @@index([staff_id], name: "idx_fk_payment_p2007_05_staff_id")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model payment_p2007_06 {
  payment_id   Int      @default(autoincrement())
  customer_id  Int
  staff_id     Int
  rental_id    Int
  amount       Decimal  @db.Decimal(5, 2)
  payment_date DateTime @db.Timestamp(6)
  customer     customer @relation(fields: [customer_id], references: [id])
  rental       rental   @relation(fields: [rental_id], references: [id])
  staff        staff    @relation(fields: [staff_id], references: [staff_id])

  @@index([customer_id], name: "idx_fk_payment_p2007_06_customer_id")
  @@index([staff_id], name: "idx_fk_payment_p2007_06_staff_id")
  @@ignore
}

model rental {
  id               Int                @id @default(autoincrement()) @map("rental_id")
  rentalDate       DateTime           @map("rental_date") @db.Timestamp(6)
  inventory_id     Int
  customer_id      Int
  returnDate       DateTime?          @map("return_date") @db.Timestamp(6)
  staff_id         Int
  last_update      DateTime           @default(now()) @db.Timestamp(6)
  customer         customer           @relation(fields: [customer_id], references: [id])
  inventory        inventory          @relation(fields: [inventory_id], references: [inventory_id])
  staff            staff              @relation(fields: [staff_id], references: [staff_id])
  payment          payment[]
  payment_p2007_01 payment_p2007_01[] @ignore
  payment_p2007_02 payment_p2007_02[] @ignore
  payment_p2007_03 payment_p2007_03[] @ignore
  payment_p2007_04 payment_p2007_04[] @ignore
  payment_p2007_05 payment_p2007_05[] @ignore
  payment_p2007_06 payment_p2007_06[] @ignore

  @@unique([rentalDate, inventory_id, customer_id], name: "idx_unq_rental_rental_date_inventory_id_customer_id")
  @@index([inventory_id], name: "idx_fk_inventory_id")
}

model staff {
  staff_id                            Int                @id @default(autoincrement())
  first_name                          String             @db.VarChar(45)
  last_name                           String             @db.VarChar(45)
  address_id                          Int
  email                               String?            @db.VarChar(50)
  store_id                            Int
  active                              Boolean            @default(true)
  username                            String             @db.VarChar(16)
  password                            String?            @db.VarChar(40)
  last_update                         DateTime           @default(now()) @db.Timestamp(6)
  picture                             Bytes?
  address                             address            @relation(fields: [address_id], references: [address_id])
  store_staff_store_idTostore         Int?
  payment                             payment[]
  rental                              rental[]
  store_staffTostore_manager_staff_id Int?
  payment_p2007_01                    payment_p2007_01[] @ignore
  payment_p2007_02                    payment_p2007_02[] @ignore
  payment_p2007_03                    payment_p2007_03[] @ignore
  payment_p2007_04                    payment_p2007_04[] @ignore
  payment_p2007_05                    payment_p2007_05[] @ignore
  payment_p2007_06                    payment_p2007_06[] @ignore
  store                               store?             @relation(fields: [storeStore_id], references: [store_id])
  storeStore_id                       Int?
}

model store {
  store_id                            Int         @id @default(autoincrement())
  manager_staff_id                    Int         @unique
  address_id                          Int
  last_update                         DateTime    @default(now()) @db.Timestamp(6)
  address                             address     @relation(fields: [address_id], references: [address_id])
  staff_staffTostore_manager_staff_id Int?
  customer                            customer[]
  inventory                           inventory[]
  staff_staff_store_idTostore         Int[]
  staff                               staff[]
}

enum mpaa_rating {
  G
  PG
  PG_13  @map("PG-13")
  R
  NC_17  @map("NC-17")
}
